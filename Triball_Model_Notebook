{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":70082,"databundleVersionId":7671841,"sourceType":"competition"}],"dockerImageVersionId":30646,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"provenance":[]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","#from timm.models.efficientnet import efficientnetv2_m\n","#import tensorflow.keras.applications.efficientnet as efn\n","!pip install timm\n","import timm\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","import datetime\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import tensorflow as tf\n","import time\n","\n","\n","from pathlib import Path\n","from sklearn.model_selection import KFold, train_test_split\n","from tensorflow.keras.callbacks import ModelCheckpoint\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.utils import to_categorical\n","\n","import tensorflow as tf\n","from tensorflow.keras.applications import ResNet50\n","from tensorflow.keras.layers import Dense, Flatten\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.losses import MeanSquaredError\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","#import effnetv2_model\n","import os\n","for dirname, _, filenames in os.walk('/content/drive/My Drive/yolo-skills-test-1'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"],"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-02-19T02:17:32.110731Z","iopub.execute_input":"2024-02-19T02:17:32.111922Z","iopub.status.idle":"2024-02-19T02:17:51.370443Z","shell.execute_reply.started":"2024-02-19T02:17:32.111878Z","shell.execute_reply":"2024-02-19T02:17:51.369297Z"},"trusted":true,"id":"7iRw7z_IPgoW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278522306,"user_tz":240,"elapsed":34847,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"170bdd52-2e18-408c-d243-88bcf029e5c3"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: timm in /usr/local/lib/python3.10/dist-packages (0.9.16)\n","Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from timm) (2.2.1+cu121)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (from timm) (0.17.1+cu121)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from timm) (6.0.1)\n","Requirement already satisfied: huggingface_hub in /usr/local/lib/python3.10/dist-packages (from timm) (0.20.3)\n","Requirement already satisfied: safetensors in /usr/local/lib/python3.10/dist-packages (from timm) (0.4.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (3.13.3)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (2023.6.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (2.31.0)\n","Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (4.66.2)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (4.10.0)\n","Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub->timm) (24.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->timm) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->timm) (3.2.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (3.1.3)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (12.1.105)\n","Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (8.9.2.26)\n","Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (12.1.3.1)\n","Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (11.0.2.54)\n","Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (10.3.2.106)\n","Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (11.4.5.107)\n","Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (12.1.0.106)\n","Requirement already satisfied: nvidia-nccl-cu12==2.19.3 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (2.19.3)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (12.1.105)\n","Requirement already satisfied: triton==2.2.0 in /usr/local/lib/python3.10/dist-packages (from torch->timm) (2.2.0)\n","Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch->timm) (12.4.127)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision->timm) (1.25.2)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision->timm) (9.4.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->timm) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub->timm) (2024.2.2)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->timm) (1.3.0)\n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["all_devices = tf.config.list_physical_devices()\n","all_devices"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:17:51.372809Z","iopub.execute_input":"2024-02-19T02:17:51.373837Z","iopub.status.idle":"2024-02-19T02:17:51.439988Z","shell.execute_reply.started":"2024-02-19T02:17:51.373799Z","shell.execute_reply":"2024-02-19T02:17:51.438825Z"},"trusted":true,"id":"DKYeRuAcPgoY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278522306,"user_tz":240,"elapsed":20,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"0e0d6c58-7148-45c7-d720-eaf41b14e208"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["if 'GPU' in str(all_devices):\n","    # Use GPUs for training/inference\n","    devices = tf.config.experimental.list_physical_devices('GPU')\n","    tf.config.experimental.list_physical_devices()\n","    device_names = [d.name.split('e:')[1] for d in devices]\n","    # Multiple GPUS\n","    #strategy = tf.distribute.MirroredStrategy(devices=device_names[:len(devices)])\n","    # One GPU\n","    strategy = tf.distribute.OneDeviceStrategy(device_names[0])\n","    print(f'Using GPU for training...')\n","    device_name_for_file = f'GPU_x{len(device_names)}'\n","elif 'TPU' in str(all_devices):\n","    # Use TPU for training\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.TPUStrategy(tpu)\n","    print(f'Using TPUs for training...')\n","    device_name_for_file = 'TPU'\n","else:\n","    # Run on CPU\n","    devices = tf.config.experimental.list_physical_devices('CPU')\n","    device_names = [d.name.split('e:')[1] for d in devices]\n","    strategy = tf.distribute.OneDeviceStrategy(device_names[0])\n","    print(f'Using CPUs for training...')\n","    device_name_for_file = 'CPU'\n","\n"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:17:51.441356Z","iopub.execute_input":"2024-02-19T02:17:51.442160Z","iopub.status.idle":"2024-02-19T02:17:51.773854Z","shell.execute_reply.started":"2024-02-19T02:17:51.442121Z","shell.execute_reply":"2024-02-19T02:17:51.772624Z"},"trusted":true,"id":"v_oetFuJPgoZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278522307,"user_tz":240,"elapsed":17,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"877b11e8-0e3e-4417-aa73-e1bad66ae00f"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Using CPUs for training...\n"]}]},{"cell_type":"code","source":["# If mnist_train.csv and mnist_test.csv are not /kaggle/input,\n","# then specify the correct directory to where they are located\n","!ls /kaggle/input/assignment-3-spring2024\n","dataset_location = Path('/content/drive/My Drive/yolo-skills-test-1')"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:17:51.775067Z","iopub.execute_input":"2024-02-19T02:17:51.775395Z","iopub.status.idle":"2024-02-19T02:17:52.800028Z","shell.execute_reply.started":"2024-02-19T02:17:51.775367Z","shell.execute_reply":"2024-02-19T02:17:52.798954Z"},"trusted":true,"id":"Dk8UEL-JPgoa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278522307,"user_tz":240,"elapsed":12,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"cbb4a04d-3777-4a5a-883a-cd845add807c"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["ls: cannot access '/kaggle/input/assignment-3-spring2024': No such file or directory\n"]}]},{"cell_type":"code","source":["train_images_dir = '/content/drive/My Drive/data/yolo-skills-test-1/images'\n","train_labels_dir = '/content/drive/My Drive/data/yolo-skills-test-1/labels'"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:17:55.838603Z","iopub.execute_input":"2024-02-19T02:17:55.838945Z","iopub.status.idle":"2024-02-19T02:17:55.903938Z","shell.execute_reply.started":"2024-02-19T02:17:55.838918Z","shell.execute_reply":"2024-02-19T02:17:55.902844Z"},"trusted":true,"id":"6q2OPP9yPgog","executionInfo":{"status":"ok","timestamp":1712278522308,"user_tz":240,"elapsed":8,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["'''\n","datagen = ImageDataGenerator(\n","        featurewise_center=False,  # set input mean to 0 over the dataset\n","        samplewise_center=False,  # set each sample mean to 0\n","        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n","        samplewise_std_normalization=False,  # divide each input by its std\n","        zca_whitening=False,  # dimesion reduction\n","        rotation_range=2,  # randomly rotate images in the range 5 degrees\n","        zoom_range = 0.01, # Randomly zoom image 10%\n","        width_shift_range=0.01,  # randomly shift images horizontally 10%\n","        height_shift_range=0.01,  # randomly shift images vertically 10%\n","        horizontal_flip=False,  # randomly flip images\n","        vertical_flip=False)  # randomly flip images\n","\n","datagen.fit(train_images_dir)\n","'''"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:17:55.905467Z","iopub.execute_input":"2024-02-19T02:17:55.905804Z","iopub.status.idle":"2024-02-19T02:17:56.204501Z","shell.execute_reply.started":"2024-02-19T02:17:55.905776Z","shell.execute_reply":"2024-02-19T02:17:56.203355Z"},"trusted":true,"id":"NIdC8R5yPgog","colab":{"base_uri":"https://localhost:8080/","height":160},"executionInfo":{"status":"ok","timestamp":1712278522474,"user_tz":240,"elapsed":173,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"54205216-3d21-49b0-a979-4604a0f3f3f1"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\ndatagen = ImageDataGenerator(\\n        featurewise_center=False,  # set input mean to 0 over the dataset\\n        samplewise_center=False,  # set each sample mean to 0\\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\\n        samplewise_std_normalization=False,  # divide each input by its std\\n        zca_whitening=False,  # dimesion reduction\\n        rotation_range=2,  # randomly rotate images in the range 5 degrees\\n        zoom_range = 0.01, # Randomly zoom image 10%\\n        width_shift_range=0.01,  # randomly shift images horizontally 10%\\n        height_shift_range=0.01,  # randomly shift images vertically 10%\\n        horizontal_flip=False,  # randomly flip images\\n        vertical_flip=False)  # randomly flip images\\n\\ndatagen.fit(train_images_dir)\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["import cv2\n","#private array of image and annotation paths\n","image_paths = []\n","label_paths = []\n","\n","# Iterate over the image directory\n","for img_path in os.listdir(train_images_dir):\n","    image_path = os.path.join(train_images_dir, img_path)\n","    print(image_path)\n","    #form annotation path from annotation directory then the first part of the image name without extension, then add .txt extension\n","    annotation_path = os.path.join(train_labels_dir, os.path.splitext(img_path)[0] + '.txt')\n","    print(annotation_path)\n","    #if os.path.isfile(image_path) and os.path.isfile(annotation_path):#if the files exist at both places\n","    image_paths.append(image_path)\n","    label_paths.append(annotation_path)\n","        #add them to list\n","#index in index array\n","\n","\n","np.array(image_paths).shape\n","np.array(label_paths).shape"],"metadata":{"trusted":true,"id":"vSc156cGPgoh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278523003,"user_tz":240,"elapsed":534,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"56e882d3-9c33-497d-bf62-d034e8042ea2"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/data/yolo-skills-test-1/images/e28e1e70-data16.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/e28e1e70-data16.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/fe93634d-data11.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/fe93634d-data11.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/b9fd22f7-data15.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/b9fd22f7-data15.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/de6ab6e1-data14.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/de6ab6e1-data14.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/f41ffa5b-data5.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/f41ffa5b-data5.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/af94f6e7-data22.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/af94f6e7-data22.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/7b838954-data17.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/7b838954-data17.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/a65879d7-data8.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/a65879d7-data8.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/6afee809-data25.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/6afee809-data25.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/2de035ba-data9.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/2de035ba-data9.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/24af8c89-data6.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/24af8c89-data6.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/3dc316dc-data10.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/3dc316dc-data10.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/207d9fe1-data21.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/207d9fe1-data21.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/34e6a65f-data24.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/34e6a65f-data24.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/53421f01-data26.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/53421f01-data26.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/59cf33c1-data7.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/59cf33c1-data7.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/400cee38-data12.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/400cee38-data12.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/1fc36643-data4.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/1fc36643-data4.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/images/06db08da-data13.jpg\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/06db08da-data13.txt\n"]},{"output_type":"execute_result","data":{"text/plain":["(19,)"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["images = []\n","\n","\n","#for every image in batch get the image\n","for path in image_paths:\n","    img = cv2.imread(path)\n","    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","    images.append(img)\n","\n","train_images = np.array(images)\n","train_images.shape"],"metadata":{"id":"GNtgVPwOfHSK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278523314,"user_tz":240,"elapsed":313,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"a23af323-ed3a-49f2-9f50-3feb65c88518"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(19, 480, 640, 3)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["bboxes = []\n","for path in label_paths:\n","    print(path)\n","    #open annotation path, turn into a bounding box array of floats\n","    with open(path, 'r') as f:\n","        lines = f.readlines()\n","        if(lines == []):\n","          #THis is if there is not an object\n","          #this solution sucks but stops crashes\n","          #ideal is to hhave the bot move straight in this case, or maybe turn\n","          #not sure what to put here\n","          bbox = [0,0,0,0,0]\n","          bboxes.append(bbox)\n","        else:\n","          bbox = [float(x) for x in lines[0].split(\" \")]\n","          bboxes.append(bbox)\n","#convert to numpy array and return\n","train_labels = np.array(bboxes)"],"metadata":{"id":"8HO3clvWfGDc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278523743,"user_tz":240,"elapsed":432,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"a6ce2c5d-1868-49e4-fef8-fdabc13c96d7"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/data/yolo-skills-test-1/labels/e28e1e70-data16.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/fe93634d-data11.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/b9fd22f7-data15.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/de6ab6e1-data14.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/f41ffa5b-data5.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/af94f6e7-data22.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/7b838954-data17.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/a65879d7-data8.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/6afee809-data25.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/2de035ba-data9.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/24af8c89-data6.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/3dc316dc-data10.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/207d9fe1-data21.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/34e6a65f-data24.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/53421f01-data26.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/59cf33c1-data7.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/400cee38-data12.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/1fc36643-data4.txt\n","/content/drive/My Drive/data/yolo-skills-test-1/labels/06db08da-data13.txt\n"]}]},{"cell_type":"code","source":["train_images, val_images, train_labels, val_labels = train_test_split(\n","    train_images, train_labels, test_size = 0.2, random_state = 42\n",")"],"metadata":{"id":"evQtsDnugu3n","executionInfo":{"status":"ok","timestamp":1712278523743,"user_tz":240,"elapsed":6,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["\n","import os\n","import cv2\n","import numpy as np\n","\n","class BoundingBoxDataset(tf.keras.utils.Sequence):\n","    def __init__(self, image_dir, annotation_dir, batch_size=32, shuffle=True):\n","        self.image_paths = []\n","        self.annotation_paths = []\n","        self.batch_size = batch_size\n","        self.shuffle = shuffle\n","\n","        # Iterate over the image directory\n","        for img_path in os.listdir(image_dir):\n","            image_path = os.path.join(image_dir, img_path)\n","            annotation_path = os.path.join(annotation_dir, os.path.splitext(img_path)[0] + '.txt')\n","\n","            if os.path.isfile(image_path) and os.path.isfile(annotation_path):\n","                self.image_paths.append(image_path)\n","                self.annotation_paths.append(annotation_path)\n","\n","        self.indexes = np.arange(len(self.image_paths))\n","\n","    def __len__(self):\n","        return len(self.image_paths) // self.batch_size\n","\n","    def __getitem__(self, idx):\n","        batch_indexes = self.indexes[idx * self.batch_size:(idx + 1) * self.batch_size]\n","\n","        images = []\n","        bboxes = []\n","\n","        for i in batch_indexes:\n","            img = cv2.imread(self.image_paths[i])\n","            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","            images.append(img)\n","\n","            with open(self.annotation_paths[i], 'r') as f:\n","                lines = f.readlines()\n","                bbox = [float(x) for x in lines[0].split()]\n","                bboxes.append(bbox)\n","\n","        images = np.array(images)\n","        bboxes = np.array(bboxes)\n","\n","        return images, bboxes\n","# This is the part we're going to expand upon (our actual model)\n","#For now we're stealing ResNet50\n","#Probably not accurate, and probably not good on Jetson Nano (edge)\n","backbone = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n","\n","inputs = backbone.input\n","x = backbone.output\n","x = Flatten()(x)\n","outputs = Dense(4, activation='linear')(x)  # 4 values for [x, y, width, height]\n","\n","model = Model(inputs=inputs, outputs=outputs)\n","\n","#Freeze layers aka done training\n","for layer in backbone.layers:\n","    layer.trainable = False\n","\n","optimizer = Adam(lr=0.001)\n","model.compile(optimizer=optimizer, loss=MeanSquaredError())\n","\n","dataset = BoundingBoxDataset(train_images_dir, train_labels_dir)\n","\n","# Simple Training loop\n","num_epochs = 15\n","for epoch in range(num_epochs):\n","    for images, bboxes in dataset:\n","        loss = model.train_on_batch(images, bboxes)\n","\n","    # Print the loss for the current epoch\n","        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss:.4f}')\n","\n","print(\"please save\")\n","model.save('object_tracker.keras')\n","# serialize model to JSON\n","model_json = model.to_json()\n","with open(\"triball_tracker.json\", \"w\") as json_file:\n","     json_file.write(model_json)\n","     json_file.write(\"HELP\")\n","print('shouldve saved')\n","\n","# serialize weights to HDF5\n","model.save_weights(\"model.h5\")\n","print(\"Saved model to disk\")"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:17:56.206018Z","iopub.execute_input":"2024-02-19T02:17:56.206428Z","iopub.status.idle":"2024-02-19T02:17:57.291444Z","shell.execute_reply.started":"2024-02-19T02:17:56.206392Z","shell.execute_reply":"2024-02-19T02:17:57.290540Z"},"trusted":true,"id":"tTsHRAM9Pgoh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278530748,"user_tz":240,"elapsed":7008,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"6778ace5-ec5f-4701-b90b-1fee311bcbc4"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:`lr` is deprecated in Keras optimizer, please use `learning_rate` or use the legacy optimizer, e.g.,tf.keras.optimizers.legacy.Adam.\n"]},{"output_type":"stream","name":"stdout","text":["please save\n","shouldve saved\n","Saved model to disk\n"]}]},{"cell_type":"code","source":["print(\"DIE\")\n","quit()\n","\n","#Defining the model architeture using basic convolution\n","    #inputs\n","inputs = tf.keras.Input(shape=(480,640,3))\n","#tanh activation function\n","model = tf.keras.models.Sequential()\n","model.add(tf.keras.layers.Conv2D(32, (32, 32), padding='same', input_shape=(480, 640, 3))) #grab last layer\n","#model.add(tf.keras.layers.BatchNormalization())\n","model.add(tf.keras.layers.Activation('relu'))\n","model.add(tf.keras.layers.Conv2D(32, (32, 32), padding='same'))\n","#model.add(tf.keras.layers.BatchNormalization())\n","model.add(tf.keras.layers.Activation('relu'))\n","model.add(tf.keras.layers.MaxPooling2D(8,8))\n","model.add(tf.keras.layers.Dropout(0.3))\n","model.add(tf.keras.layers.Conv2D(64, (8, 8),padding='same'))\n","#model.add(tf.keras.layers.BatchNormalization())\n","model.add(tf.keras.layers.Activation('relu'))\n","model.add(tf.keras.layers.Conv2D(64, (8, 8), padding='same'))\n","#model.add(tf.keras.layers.BatchNormalization())\n","model.add(tf.keras.layers.Activation('relu'))\n","model.add(tf.keras.layers.MaxPooling2D(4,4))\n","model.add(tf.keras.layers.Dropout(0.3))\n","#model.add(tf.keras.layers.Conv2D(128, (3, 3),  padding='same',))\n","#model.add(tf.keras.layers.BatchNormalization())\n","#model.add(tf.keras.layers.Activation('relu'))\n","#model.add(tf.keras.layers.Conv2D(128, (3, 3), padding='same'))\n","#model.add(tf.keras.layers.BatchNormalization())\n","#model.add(tf.keras.layers.Activation('relu'))\n","#model.add(tf.keras.layers.MaxPooling2D(2,2))\n","#model.add(tf.keras.layers.Dropout(0.3))\n","model.add(tf.keras.layers.Flatten())\n","model.add(tf.keras.layers.Dense(128, activation='relu'))\n","model.add(tf.keras.layers.Dense(units=5, activation='softmax'))\n","#model = tf.keras.Model(inputs=inputs, outputs=outputs)\n","#maybe modify dropout and amount of batch normalization we do\n","#model summary\n","model.summary()"],"metadata":{"id":"RWAvrJHEhSq4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278531252,"user_tz":240,"elapsed":510,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"fd4df1dd-8688-4aaa-bae5-492dc1ee2898"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["DIE\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 480, 640, 32)      98336     \n","                                                                 \n"," activation (Activation)     (None, 480, 640, 32)      0         \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 480, 640, 32)      1048608   \n","                                                                 \n"," activation_1 (Activation)   (None, 480, 640, 32)      0         \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 60, 80, 32)        0         \n"," D)                                                              \n","                                                                 \n"," dropout (Dropout)           (None, 60, 80, 32)        0         \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 60, 80, 64)        131136    \n","                                                                 \n"," activation_2 (Activation)   (None, 60, 80, 64)        0         \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 60, 80, 64)        262208    \n","                                                                 \n"," activation_3 (Activation)   (None, 60, 80, 64)        0         \n","                                                                 \n"," max_pooling2d_1 (MaxPoolin  (None, 15, 20, 64)        0         \n"," g2D)                                                            \n","                                                                 \n"," dropout_1 (Dropout)         (None, 15, 20, 64)        0         \n","                                                                 \n"," flatten_1 (Flatten)         (None, 19200)             0         \n","                                                                 \n"," dense_1 (Dense)             (None, 128)               2457728   \n","                                                                 \n"," dense_2 (Dense)             (None, 5)                 645       \n","                                                                 \n","=================================================================\n","Total params: 3998661 (15.25 MB)\n","Trainable params: 3998661 (15.25 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["\n","#model.compile(optimizer='adam',\n","              #loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","          #    metrics=['accuracy'])\n","#3\n","#history = model.fit(train_images, train_labels, epochs=10,\n","               #     validation_data=(test_images, test_labels))\n"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:17:57.294697Z","iopub.execute_input":"2024-02-19T02:17:57.295058Z","iopub.status.idle":"2024-02-19T02:17:57.299329Z","shell.execute_reply.started":"2024-02-19T02:17:57.295029Z","shell.execute_reply":"2024-02-19T02:17:57.298376Z"},"trusted":true,"id":"UZcP0R-0Pgoh","executionInfo":{"status":"ok","timestamp":1712278531253,"user_tz":240,"elapsed":13,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["file_datetime = datetime.datetime.now().strftime('%Y_%m_%d_%H_%S')\n","filepath = f'./model_{file_datetime}_{device_name_for_file}.keras'\n","print(f'Best model will be saved to: {Path.cwd() / filepath}')"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:17:57.300703Z","iopub.execute_input":"2024-02-19T02:17:57.301090Z","iopub.status.idle":"2024-02-19T02:17:57.352063Z","shell.execute_reply.started":"2024-02-19T02:17:57.301050Z","shell.execute_reply":"2024-02-19T02:17:57.350988Z"},"trusted":true,"id":"4OcouJIYPgoh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712278531253,"user_tz":240,"elapsed":12,"user":{"displayName":"Zachary St.Thomas","userId":"04597993833758608109"}},"outputId":"fa273e9d-1937-42bc-a5ce-0934f2c72bbf"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Best model will be saved to: /content/model_2024_04_05_00_30_CPU.keras\n"]}]},{"cell_type":"code","source":["# Train the model, using datagen data\n","\n","'''\n","BATCH_SIZE = 4\n","NUM_EPOCHS = 30\n","#opt_rms = tf.keras.optimizers.rmsprop(lr=0.001,decay=1e-6)\n","MIN_VAL_LOSS = 0#np.inf#bad name, trying now to optimize accuracy\n","loss_history = [[],[]]\n","acc_history = [[],[]]\n","total_train_time = 0.0\n","model.compile(loss='categorical_crossentropy',\n","        optimizer='adam', #maybe change optimizer?\n","        metrics=['accuracy'])\n","kf = KFold(n_splits=10, shuffle=True, random_state=42)#maybe use? maybe change to 5?\n","# Training loop\n","# NOTE: This works better than callbacks\n","for i in range(0, NUM_EPOCHS):\n","    print(f'EPOCH: {i+1}/{NUM_EPOCHS}')\n","    start_epoch = time.time()\n","\n","    history = model.fit(\n","        train_images,train_labels,\n","        #datagen.flow(train_images,train_labels_cat, batch_size=BATCH_SIZE),\n","        validation_data=(val_images, val_labels),\n","        epochs=1,\n","        verbose = 1\n","    )\n","    end_epoch = time.time()#https://storage.googleapis.com/kaggle-avatars/thumbnails/default-thumb.png\n","    delta_epoch = end_epoch - start_epoch\n","    total_train_time += delta_epoch\n","    print(f'LOG --> This epoch took {delta_epoch}...')\n","    if history.history['val_accuracy'][0] > MIN_VAL_LOSS: #val_accuracy remember to switch the comparison when switching\n","        print(f'LOG --> val_accuracy improved from {MIN_VAL_LOSS} to {history.history[\"val_accuracy\"][0]}...')\n","        print(f'LOG --> saving model as {filepath}')\n","        MIN_VAL_LOSS = history.history['val_accuracy'][0]\n","        model.save(filepath, overwrite=True)\n","    else:\n","        print(f'LOG --> val_accuracy did not improve...')\n","    # Keep track of the training history\n","    loss_history[0].append(history.history['loss'][0])\n","    loss_history[1].append(history.history['val_loss'][0])\n","    acc_history[0].append(history.history['accuracy'][0])\n","    acc_history[1].append(history.history['val_accuracy'][0])\n","print(f'LOG--> Total training time: {total_train_time}')"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:17:57.353712Z","iopub.execute_input":"2024-02-19T02:17:57.354112Z","iopub.status.idle":"2024-02-19T02:23:42.997004Z","shell.execute_reply.started":"2024-02-19T02:17:57.354086Z","shell.execute_reply":"2024-02-19T02:23:42.995975Z"},"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"Fwm8UlWjPgoh","outputId":"364cdfd0-71ec-482e-e77e-6e5e31556b34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["EPOCH: 1/30\n"]}]},{"cell_type":"code","source":["'''plt.plot(acc_history[0], color='black',)\n","plt.plot(acc_history[1], color='red',)\n","plt.title('Training Accuracy vs Validation Accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Validation'], loc='lower right')\n","plt.show()\n","\n","plt.plot(loss_history[0])\n","plt.plot(loss_history[1])\n","plt.title('Training Loss vs Validation Loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Validation'], loc='upper right')\n","plt.show()"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:23:42.998369Z","iopub.execute_input":"2024-02-19T02:23:42.999101Z","iopub.status.idle":"2024-02-19T02:23:43.520775Z","shell.execute_reply.started":"2024-02-19T02:23:42.999063Z","shell.execute_reply":"2024-02-19T02:23:43.519836Z"},"trusted":true,"id":"DOa1a6gyPgoi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''import csv\n","\n","# Load the best model\n","print(f'Loading saved model from {filepath}...')\n","best_model = tf.keras.models.load_model(filepath)\n","\n","classes = {\n","    0: 'airplane',\n","    1: 'car',\n","    2: 'bird',\n","    3: 'cat',\n","    4: 'deer',\n","    5: 'dog',\n","    6: 'frog',\n","    7: 'horse',\n","    8: 'ship',\n","    9: 'truck'\n","}\n","\n","# Warm up device\n","print('Starting Warmup...')\n","with open('submission.csv', 'w', newline='\\n') as csvfile:\n","    writer = csv.writer(csvfile)\n","    count = 1\n","    writer.writerow(['id','label'])\n","    for prediction in best_model.predict(test_images, batch_size=BATCH_SIZE, verbose=0):\n","        value = np.argmax(prediction)\n","        writer.writerow([count,classes[value]])\n","        count+=1\n","\n"],"metadata":{"execution":{"iopub.status.busy":"2024-02-19T02:23:43.522338Z","iopub.execute_input":"2024-02-19T02:23:43.522856Z","iopub.status.idle":"2024-02-19T02:23:46.134067Z","shell.execute_reply.started":"2024-02-19T02:23:43.522818Z","shell.execute_reply":"2024-02-19T02:23:46.133067Z"},"trusted":true,"id":"wmRiKiq_Pgoi"},"execution_count":null,"outputs":[]}]}